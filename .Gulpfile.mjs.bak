"use strict";

import gulp from "gulp";
const { series,parallel,src,dest,watch } = gulp;
import os from "os";
// import gutil from "gulp-util";
import dartSass from "sass";
import gulpSass from "gulp-sass";
const sass = gulpSass(dartSass);
import jshint from "gulp-jshint";
import uglify from "gulp-uglify";
import rename from "gulp-rename";
import concat from "gulp-concat";
import notify from "gulp-notify";
import header from "gulp-header";
import minifycss from "gulp-clean-css";
//var jsdoc        = require("gulp-jsdoc");
//var jsdoc2md     = require("gulp-jsdoc-to-markdown");
import pkg from "./package.json" assert {"type":"json"};
import dateFormater from "dateformatter";
const dateFormat = dateFormater.format;
import replace from "gulp-replace";


pkg.name         = "Editor.md";
pkg.today        = dateFormat;

const headerComment = ["/*",
    " * <%= pkg.name %>",
    " *",
    " * @file        <%= fileName(file) %> ",
    " * @version     v<%= pkg.version %> ",
    " * @description <%= pkg.description %>",
    " * @license     MIT License",
    " * @author      <%= pkg.author %>",
    " * {@link       <%= pkg.homepage %>}",
    " * @updateTime  <%= pkg.today('Y-m-d') %>",
    " */",
    "\r\n"].join("\r\n");

const headerMiniComment = "/*! <%= pkg.name %> v<%= pkg.version %> | <%= fileName(file) %> | <%= pkg.description %> | MIT License | By: <%= pkg.author %> | <%= pkg.homepage %> | <%=pkg.today('Y-m-d') %> */\r\n";
const replaceText1 = [
    "let cmModePath  = \"codemirror/mode/\";",
    "            let cmAddonPath = \"codemirror/addon/\";",
    "",
    "           let codeMirrorModules = [",
    "                \"jquery\", \"marked\", \"prettify\",",
    "                \"katex\", \"raphael\", \"underscore\", \"flowchart\",  \"jqueryflowchart\",  \"sequenceDiagram\",",
    "",
    "                \"codemirror/lib/codemirror\",",
    "                cmModePath + \"css/css\",",
    "                cmModePath + \"sass/sass\",",
    "                cmModePath + \"shell/shell\",",
    "                cmModePath + \"sql/sql\",",
    "                cmModePath + \"clike/clike\",",
    "                cmModePath + \"php/php\",",
    "                cmModePath + \"xml/xml\",",
    "                cmModePath + \"markdown/markdown\",",
    "                cmModePath + \"javascript/javascript\",",
    "                cmModePath + \"htmlmixed/htmlmixed\",",
    "                cmModePath + \"gfm/gfm\",",
    "                cmModePath + \"http/http\",",
    "                cmModePath + \"go/go\",",
    "                cmModePath + \"dart/dart\",",
    "                cmModePath + \"coffeescript/coffeescript\",",
    "                cmModePath + \"nginx/nginx\",",
    "                cmModePath + \"python/python\",",
    "                cmModePath + \"perl/perl\",",
    "                cmModePath + \"lua/lua\",",
    "                cmModePath + \"r/r\", ",
    "                cmModePath + \"ruby/ruby\", ",
    "                cmModePath + \"rst/rst\",",
    "                cmModePath + \"smartymixed/smartymixed\",",
    "                cmModePath + \"vb/vb\",",
    "                cmModePath + \"vbscript/vbscript\",",
    "                cmModePath + \"velocity/velocity\",",
    "                cmModePath + \"xquery/xquery\",",
    "                cmModePath + \"yaml/yaml\",",
    "                cmModePath + \"erlang/erlang\",",
    "                cmModePath + \"jade/jade\",",
    "",
    "                cmAddonPath + \"edit/trailingspace\", ",
    "                cmAddonPath + \"dialog/dialog\", ",
    "                cmAddonPath + \"search/searchcursor\", ",
    "                cmAddonPath + \"search/search\", ",
    "                cmAddonPath + \"scroll/annotatescrollbar\", ",
    "                cmAddonPath + \"search/matchesonscrollbar\", ",
    "                cmAddonPath + \"display/placeholder\", ",
    "                cmAddonPath + \"edit/closetag\", ",
    "                cmAddonPath + \"fold/foldcode\",",
    "                cmAddonPath + \"fold/foldgutter\",",
    "                cmAddonPath + \"fold/indent-fold\",",
    "                cmAddonPath + \"fold/brace-fold\",",
    "                cmAddonPath + \"fold/xml-fold\", ",
    "                cmAddonPath + \"fold/markdown-fold\",",
    "                cmAddonPath + \"fold/comment-fold\", ",
    "                cmAddonPath + \"mode/overlay\", ",
    "                cmAddonPath + \"selection/active-line\", ",
    "                cmAddonPath + \"edit/closebrackets\", ",
    "                cmAddonPath + \"display/fullscreen\",",
    "                cmAddonPath + \"search/match-highlighter\"",
    "           ];",
    "",
    "            define(codeMirrorModules, factory);"
].join("\r\n");

const replaceText2 = [
    "if (typeof define == \"function\" && define.amd) {",
    "       $          = arguments[0];",
    "       marked     = arguments[1];",
    "       prettify   = arguments[2];",
    "       katex      = arguments[3];",
    "       Raphael    = arguments[4];",
    "       _          = arguments[5];",
    "       flowchart  = arguments[6];",
    "       CodeMirror = arguments[9];",
    "   }"
].join("\r\n");



const codeMirror = {
    path: {
        src: {
            mode: "lib/codemirror/mode",
            addon: "lib/codemirror/addon"
        },
        dist: "lib/codemirror"
    },
    modes: [
        "css",
        "sass",
        "shell",
        "sql",
        "clike",
        "php",
        "xml",
        "markdown",
        "javascript",
        "htmlmixed",
        "gfm",
        "http",
        "go",
        "dart",
        "coffeescript",
        "nginx",
        "python",
        "perl",
        "lua",
        "r",
        "ruby",
        "rst",
        "smartymixed",
        "vb",
        "vbscript",
        "velocity",
        "xquery",
        "yaml",
        "erlang",
        "jade",
    ],

    addons: [
        "edit/trailingspace",
        "dialog/dialog",
        "search/searchcursor",
        "search/search",
        "scroll/annotatescrollbar",
        "search/matchesonscrollbar",
        "display/placeholder",
        "edit/closetag",
        "fold/foldcode",
        "fold/foldgutter",
        "fold/indent-fold",
        "fold/brace-fold",
        "fold/xml-fold",
        "fold/markdown-fold",
        "fold/comment-fold",
        "mode/overlay",
        "selection/active-line",
        "edit/closebrackets",
        "display/fullscreen",
        "search/match-highlighter"
    ]
};
async function scssTask(fileName, pathOrNull) {

    let path = pathOrNull || "scss/";

    let distPath = "css";

    return sass(path + fileName + ".scss", {style: "expanded", sourcemap: false, noCache: true})
        .pipe(dest(distPath))
        .pipe(header(headerComment, {
            pkg: pkg, fileName: function (file) {
                let name = file.path.split(file.base);
                return name[1].replace("\\", "");
            }
        }))
        .pipe(dest(distPath))
        .pipe(rename({suffix: ".min"}))
        .pipe(dest(distPath))
        .pipe(minifycss())
        .pipe(dest(distPath))
        .pipe(header(headerMiniComment, {
            pkg: pkg, fileName: function (file) {
                let name = file.path.split(file.base);
                return name[1].replace("\\", "");
            }
        }))
        .pipe(dest(distPath))
        .pipe(notify({message: fileName + ".scss task completed!"}));
}

export default {

    scssMain:async ()=> scssTask("editormd"),
    scssPreview:async ()=>scssTask("editormd.preview"),
    scssLogo:async ()=> scssTask("editormd.logo"),
    scssAll:()=> series(
        this.scssMain,
        this.scssPreview,
        this.scssLogo
    ),

    js:async ()=>{return src("./src/editormd.js")
        .pipe(jshint("./.jshintrc"))
        .pipe(jshint.reporter("default"))
        .pipe(header(headerComment, {pkg : pkg, fileName : function(file) {
                let name = file.path.split(file.base);
                return name[1].replace(/[\\\/]?/, "");
            }}))
        .pipe(dest("./"))
        .pipe(rename({ suffix: ".min" }))
        .pipe(uglify())  // {outSourceMap: true, sourceRoot: "./"}
        .pipe(dest("./"))
        .pipe(header(headerMiniComment, {pkg : pkg, fileName : function(file) {
                let name = file.path.split(file.base + ( (os.platform() === "win32") ? "\\" : "/") );
                return name[1].replace(/[\\\/]?/, "");
            }}))
        .pipe(dest("./"))
        .pipe(notify({ message: "editormd.js task complete" }));
    },
    amd:async ()=>{return src("src/editormd.js")
        .pipe(rename({ suffix: ".amd" }))
        .pipe(dest("./"))
        .pipe(header(headerComment, {pkg : pkg, fileName : function(file) {
                let name = file.path.split(file.base);
                return name[1].replace(/[\\\/]?/, "");
            }}))
        .pipe(dest("./"))
        .pipe(replace("/* Require.js define replace */", replaceText1))
        .pipe(dest("./"))
        .pipe(replace("/* Require.js assignment replace */", replaceText2))
        .pipe(dest("./"))
        .pipe(rename({ suffix: ".min" }))
        .pipe(uglify()) //{outSourceMap: true, sourceRoot: "./"}
        .pipe(dest("./"))
        .pipe(header(headerMiniComment, {pkg : pkg, fileName : function(file) {
                let name = file.path.split(file.base + ( (os.platform() === "win32") ? "\\" : "/") );
                return name[1].replace(/[\\\/]?/, "");
            }}))
        .pipe(dest("./"))
        .pipe(notify({ message: "amd version task complete"}));
    },
    cmAddon:async ()=>{
        let addons = [];

        for(let i in codeMirror.addons) {
            let addon = codeMirror.addons[i];
            addons.push(codeMirror.path.src.addon + "/" + addon + ".js");
        }

        return src(addons)
            .pipe(concat("addons.min.js"))
            .pipe(dest(codeMirror.path.dist))
            .pipe(uglify()) //{outSourceMap: true, sourceRoot: codeMirror.path.dist}
            .pipe(dest(codeMirror.path.dist))
            .pipe(header(headerMiniComment, {pkg : pkg, fileName : function(file) {
                    let name = file.path.split(file.base + "\\");
                    return (name[1]?name[1]:name[0]).replace(/\\/g, "");
                }}))
            .pipe(dest(codeMirror.path.dist))
            .pipe(notify({ message: "codemirror-addon.js task complete" }));
    },
    cmMode:async ()=>{
        let modes = [
            codeMirror.path.src.mode + "/meta.js"
        ];

        for(let i in codeMirror.modes) {
            let mode = codeMirror.modes[i];
            modes.push(codeMirror.path.src.mode + "/" + mode + "/" + mode + ".js");
        }

        return src(modes)
            .pipe(concat("modes.min.js"))
            .pipe(dest(codeMirror.path.dist))
            .pipe(uglify()) // {outSourceMap: true, sourceRoot: codeMirror.path.dist}
            .pipe(dest(codeMirror.path.dist))
            .pipe(header(headerMiniComment, {pkg : pkg, fileName : function(file) {
                    let name = file.path.split(file.base + "\\");
                    return (name[1]?name[1]:name[0]).replace(/\\/g, "");
                }}))
            .pipe(dest(codeMirror.path.dist))
            .pipe(notify({ message: "codemirror-mode task complete!" }));

    },

    cm:()=>series(this.cmAddon,this.cmMode),
    watch:()=>parallel(
        watch("scss/editormd.scss", this.scssMain),
        watch("scss/editormd.preview.scss", series(this.scssPreview,this.scssLogo)),
        watch("scss/editormd.logo.scss", series(this.scssMain,this.scssLogo)),
        watch("src/editormd.js", series(this.js,this.amd))
    ),
    default:()=>{
        return  parallel(
            this.js,
            this.scssAll,
            this.amd,
            this.cm,
        );
    }
};

/*
task("jsdoc", function(){
    return gulp.src(["./src/editormd.js", "README.md"])
               .pipe(jsdoc.parser())
               .pipe(jsdoc.generator("./docs/html"));
});

gulp.task("jsdoc2md", function() {
    return gulp.src("src/js/editormd.js")
            .pipe(jsdoc2md())
            .on("error", function(err){
                gutil.log(gutil.colors.red("jsdoc2md failed"), err.message);
            })
            .pipe(rename(function(path) {
                path.extname = ".md";
            }))
            .pipe(gulp.dest("docs/markdown"));
});
*/
